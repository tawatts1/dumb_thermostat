# everything after a '#' will be ignored as a comment. 
# This is a dictionary, a common python object that matches keys to values. 
# A dictionary is denoted using curly braces {} with key-value pairs denoted
# using a :

{
# How large of a margin of error for temperature measurement. 
# eg, if you are keeping the temperature at a cool 79 and the threshhold is 1, 
#       it will not turn on until the temperature is above 80.0, and will not
#       turn off until the temperature is below 78.0
"threshhold":1.0,       

# weekday cooling settings. 
# Settings are written as dictionaries. Each time 'points' to a temperature. 
# for example, if your cool settings are 
#   {8:80, 17.5:76}
# then from 8:00 AM to 5:30 PM the temperature will be set to 80, and from 
# 5:30 PM to 8:00 AM the temperature will be set to 76
"cool":
    {8:80, 13.5:74, 15:81, 20:78, 23:76}, 
    
# Weekend cooling settings
"weekend_cool":
    {9:79, 12:79.5, 15:80, 17:79.5, 20:78, 23:76},

# Weekday heating settings
"heat":
    {7:69, 8:70, 12:100, 12.75:71, 15:69, 20:71, 22.5:65},
# Weekend heating settings
"weekend_heat": 
    {8:69, 10:71, 14:71, 15:69, 20:71, 22.5:65},

# Temperature range at which you don't want it to ever check to switch between heating
#   and cooling. 
"no_compressor":(72,76), 

# Maximum number of minutes that it can run
"max_on":60,

# Minimum number of minutes that it can run (to prevent short cycling)
"min_on":20,

# Minimum number of minutes that it can be off (to have safe starts and prevent 
# short cycling)
"min_off":5,

# Not used?
"sleep_seconds":5,

# GPIO pins used for fan, compressor, and switch. The switch controls a valve 
# that switches between heating and cooling. 
"gpio_fan":16,
"gpio_compressor":20,
"gpio_switch":21,

# GPIO pin used for indicator LED
"gpio_led":18,

# about how many minutes of measurements it takes into account when it 
# calculates current temperature
"time_averaging_minutes":3
}
